<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tesseract</name>
    </assembly>
    <members>
        <member name="T:Tesseract.BitmapHelper">
            <summary>
            Description of BitmapHelper.
            </summary>
        </member>
        <member name="M:Tesseract.BitmapHelper.GetBPP(System.Drawing.Bitmap)">
            <summary>
            gets the number of Bits Per Pixel (BPP)
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="T:Tesseract.BitmapToPixConverter">
            <summary>
            Description of BitmapToPixConverter.
            </summary>
        </member>
        <member name="T:Tesseract.Interop.HostProcessInfo">
            <summary>
            Provides information about the hosting process.
            </summary>
        </member>
        <member name="T:Tesseract.RotationFill">
            <summary>
            What colour pixels should be used for the outside?
            </summary>
        </member>
        <member name="F:Tesseract.RotationFill.White">
            <summary>
            Bring in white pixels from the outside.
            </summary>
        </member>
        <member name="F:Tesseract.RotationFill.Black">
            <summary>
            Bring in black pixels from the outside.
            </summary>
        </member>
        <member name="T:Tesseract.RotationMethod">
            <summary>
            Represents the method used to rotate an image.
            </summary>
        </member>
        <member name="F:Tesseract.RotationMethod.AreaMap">
            <summary>
            Use area map rotation, if possible.
            </summary>
        </member>
        <member name="F:Tesseract.RotationMethod.Shear">
            <summary>
            Use shear rotation.
            </summary>
        </member>
        <member name="F:Tesseract.RotationMethod.Sampling">
            <summary>
            Use sampling.
            </summary>
        </member>
        <member name="T:Tesseract.ScewSweep">
            <summary>
            Represents the parameters for a sweep search used by scew algorithms.
            </summary>
        </member>
        <member name="T:Tesseract.TesseractEngine">
            <summary>
            Description of Engine.
            </summary>
        </member>
        <member name="M:Tesseract.TesseractEngine.SetVariable(System.String,System.String)">
            <summary>
            Sets the value of a string variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.SetVariable(System.String,System.Boolean)">
            <summary>
            Sets the value of a boolean variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.SetVariable(System.String,System.Int32)">
            <summary>
            Sets the value of a integer variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.SetVariable(System.String,System.Double)">
            <summary>
            Sets the value of a double variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.TryGetBoolVariable(System.String,System.Boolean@)">
            <summary>
            Attempts to retrieve the value for a boolean variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.TryGetIntVariable(System.String,System.Int32@)">
            <summary>
            Attempts to retrieve the value for an integer variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.TryGetDoubleVariable(System.String,System.Double@)">
            <summary>
            Attempts to retrieve the value for a double variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.TryGetStringVariable(System.String,System.String@)">
            <summary>
            Attempts to retrieve the value for a string variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes the specific image.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes a specified region in the image using the specified page layout analysis mode.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="region">The image region to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes the specific image.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Processes a specified region in the image using the specified page layout analysis mode.
            </summary>
            <remarks>
            You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="region">The image region to process.</param>
            <param name="pageSegMode">The page layout analyasis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(System.Drawing.Bitmap,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Process the specified bitmap image.
            </summary>
            <remarks>
            Please consider <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.Nullable{Tesseract.PageSegMode})"/> instead. This is because
            this method must convert the bitmap to a pix for processing which will add additional overhead.
            Leptonica also supports a large number of image pre-processing functions as well.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="pageSegMode">The page segmentation mode.</param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(System.Drawing.Bitmap,System.String,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Process the specified bitmap image.
            </summary>
            <remarks>
            Please consider <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,System.Nullable{Tesseract.PageSegMode})"/> instead. This is because
            this method must convert the bitmap to a pix for processing which will add additional overhead.
            Leptonica also supports a large number of image pre-processing functions as well.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="pageSegMode">The page segmentation mode.</param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(System.Drawing.Bitmap,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Process the specified bitmap image.
            </summary>
            <remarks>
            Please consider <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})"/> instead. This is because
            this method must convert the bitmap to a pix for processing which will add additional overhead.
            Leptonica also supports a large number of image pre-processing functions as well.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="region">The region of the image to process.</param>
            <param name="pageSegMode">The page segmentation mode.</param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.TesseractEngine.Process(System.Drawing.Bitmap,System.String,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})">
            <summary>
            Process the specified bitmap image.
            </summary>
            <remarks>
            Please consider <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,System.String,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})"/> instead. This is because
            this method must convert the bitmap to a pix for processing which will add additional overhead.
            Leptonica also supports a large number of image pre-processing functions as well.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="region">The region of the image to process.</param>
            <param name="pageSegMode">The page segmentation mode.</param>
            <returns></returns>
        </member>
        <member name="P:Tesseract.TesseractEngine.DefaultPageSegMode">
            <summary>
            Gets or sets default <see cref="T:Tesseract.PageSegMode"/> mode used by <see cref="M:Tesseract.TesseractEngine.Process(Tesseract.Pix,Tesseract.Rect,System.Nullable{Tesseract.PageSegMode})"/>.
            </summary>
        </member>
        <member name="M:Tesseract.Interop.TessApi.BaseApiCreate">
            <summary>
            Creates a new BaseAPI instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tesseract.Interop.TessApi.BaseApiDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Deletes a base api instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tesseract.Interop.Constants">
            <summary>
            Description of Constants.
            </summary>
        </member>
        <member name="T:Tesseract.Interop.WindowsLibraryLoader">
            <summary>
            Handles loading embedded dlls into memory, based on http://stackoverflow.com/questions/666799/embedding-unmanaged-dll-into-a-managed-c-sharp-dll.
            </summary>
        </member>
        <member name="F:Tesseract.Interop.WindowsLibraryLoader.DefaultTempDirectory">
            <summary>
            The default base directory name to copy the assemblies too.
            </summary>
        </member>
        <member name="M:Tesseract.Interop.WindowsLibraryLoader.GetProcessArchitecture">
            <summary>
            Get's the current process architecture while keeping track of any assumptions or possible errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tesseract.Interop.WindowsLibraryLoader.FixUpDllFileName(System.String)">
            <summary>
            Determines if the dynamic link library file name requires a suffix
            and adds it if necessary.
            </summary>
        </member>
        <member name="M:Tesseract.Interop.WindowsLibraryLoader.GetPlatformName(System.String)">
            <summary>
            Given the processor architecture, returns the name of the platform.
            </summary>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapCreate(System.Int32)">
            <summary>
            Creates a new colormap with the specified <paramref name="depth"/>.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapCreateRandom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with random colors where the first color can optionally be set to black, and the last optionally set to white.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="hasBlack">If set to 1 the first color will be black.</param>
            <param name="hasWhite">If set to 1 the last color will be white.</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapCreateLinear(System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with equally spaced gray color values. 
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="levels">The number of levels (must be between 2 and 2^<paramref name="depth"/></param>
            <returns>The pointer to the colormap, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapCopy(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Performs a deep copy of the color map.
            </summary>
            <param name="cmaps">The pointer to the colormap instance.</param>
            <returns>The pointer to the colormap, or null on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapDestroy(System.IntPtr@)">
            <summary>
            Destorys and cleans up any memory used by the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance, set to null on success.</param>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetFreeCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of free color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of free color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetDepth(System.Runtime.InteropServices.HandleRef)">
            <returns>Returns color maps depth, or 0 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetMinDepth(System.Runtime.InteropServices.HandleRef,System.Int32@)">
            <summary>
            Gets the minimum pix depth required to support the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="minDepth">Returns the minimum depth to support the colormap</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapClear(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Removes all colors from the color map by setting the count to zero.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapAddColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the color to the pix color map if their is room.
            </summary>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapAddNewColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the colors index in the data array.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapAddNearestColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the color's index in the data array.
            </summary>
            <remarks>
            If the color doesn't exist and there is not enough room to add a new color return the nearest color.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapUsableColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Checks if the color already exists or if their is enough room to add it.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="usable">Returns 1 if usable; 0 if not.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapAddBlackOrWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Adds a color (black\white) if not already there returning it's index through <paramref name="index"/>.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="color">The color to add (0 for black; 1 for white)</param>
            <param name="index">The index of the color.</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapSetBlackAndWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32)">
            <summary>
            Sets the darkest color in the colormap to black, if <paramref name="setBlack"/> is 1. 
            Sets the lightest color in the colormap to white if <paramref name="setWhite"/> is 1. 
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="setBlack">0 for no operation; 1 to set darket color to black</param>
            <param name="setWhite">0 for no operation; 1 to set lightest color to white</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the color entry.</param>
            <param name="redValue">The color entry's red value.</param>
            <param name="blueValue">The color entry's blue value.</param>
            <param name="greenValue">The color entry's green value.</param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetColor32(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <remarks>
            The alpha channel will always be zero as it is not used in Leptonica color maps.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the color entry.</param>
            <param name="color">The color entry as 32 bit value</param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapResetColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a previously allocated color entry.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the colormap entry</param>
            <param name="redValue"></param>
            <param name="blueValue"></param>
            <param name="greenValue"></param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the index of the color entry with the specified color, return 0 if found; 1 if not.
            </summary>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapHasColor(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            Returns 0 if the color exists in the color map; otherwise 1.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapCountGrayColors(System.Runtime.InteropServices.HandleRef,System.Int32@)">
            <summary>
            Returns the number of unique grey colors including black and white.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetRankIntensity(System.Runtime.InteropServices.HandleRef,System.Single,System.Int32@)">
            <summary>
            Finds the index of the color entry with the rank intensity.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetNearestIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Finds the index of the color entry closest to the specified color.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.LeptonicaApi.pixcmapGetNearestGrayIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Finds the index of the color entry closest to the specified color.
            </summary>
            <remarks>
            Should only be used on gray colormaps.
            </remarks>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:Tesseract.Interop.MarshalHelper.StrLength(System.IntPtr)">
            <summary>
            Gets the number of bytes in a null terminated byte array.
            </summary>
        </member>
        <member name="M:Tesseract.MathHelper.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Calculates the smallest integer greater than the quotant of dividend and divisor.
            </summary>
            <see href="http://stackoverflow.com/questions/921180/how-can-i-ensure-that-a-division-of-integers-is-always-rounded-up"/>
        </member>
        <member name="T:Tesseract.Orientation">
            <summary>
            Represents orientation that the page would need to be rotated so that .
            </summary>
            <remarks>
            Orientation is defined as to what side of the page would need to correspond to the 'up' direction such that the characters will
            be read able. Another way of looking at this what direction you need to rotate you head so that "up" aligns with Orientation, 
            then the characters will appear "right side up" and readable.
            
            In short:
            <list type="bullet">
            	<item>PageUp - Page is correctly alligned with up and no rotation is needed.</item>
            	<item>PageRight - Page needs to be rotated so the right hand side is up, 90 degress counter clockwise, to be readable.</item>
            	<item>PageDown - Page needs to be rotated so the bottom side is up, 180 degress counter clockwise, to be readable.</item>
            	<item>PageLeft - Page needs to be rotated so the left hand side is up, 90 degress clockwise, to be readable.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Tesseract.Orientation.PageUp">
            <summary>
            Page is correctly alligned with up and no rotation is needed.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageRight">
            <summary>
            Page needs to be rotated so the right hand side is up, 90 degress counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageDown">
            <summary>
            Page needs to be rotated so the bottom side is up, 180 degress counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:Tesseract.Orientation.PageLeft">
            <summary>
            Page needs to be rotated so the left hand side is up, 90 degress clockwise, to be readable.
            </summary>
        </member>
        <member name="T:Tesseract.PageIterator">
            <summary>
            Represents an object that can iterate over tesseract's page structure.
            </summary>
            <remarks>
            The iterator points to tesseract's internal page structure and is only valid while the Engine instance that created it exists
            and has not been subjected to a call to Recognize since the iterator was created.
            </remarks>
        </member>
        <member name="M:Tesseract.PageIterator.Begin">
            <summary>
            Moves the iterator to the start of the page.
            </summary>
        </member>
        <member name="M:Tesseract.PageIterator.Next(Tesseract.PageIteratorLevel)">
            <summary>
            Moves to the start of the next element at the given level.
            </summary>
            <remarks>
            
            </remarks>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.PageIterator.Next(Tesseract.PageIteratorLevel,Tesseract.PageIteratorLevel)">
            <summary>
            Moves the iterator to the next <paramref name="element"/> iff the iterator is not currently pointing to the last <paramref name="element"/> in the specified <paramref name="level"/> (i.e. the last word in the paragraph).
            </summary>
            <param name="level">The iterator level.</param>
            <param name="element">The page level.</param>
            <returns><c>True</c> iff there is another <paramref name="element"/> to advance too and the current element is not the last element at the given level; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:Tesseract.PageIterator.IsAtBeginningOf(Tesseract.PageIteratorLevel)">
            <summary>
            Returns <c>True</c> if the iterator is at the first element at the given level.
            </summary>
            <remarks>
            A possible use is to determin if a call to next(word) moved to the start of a new paragraph.
            </remarks>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.PageIterator.IsAtFinalOf(Tesseract.PageIteratorLevel,Tesseract.PageIteratorLevel)">
            <summary>
            Returns <c>True</c> if the iterator is possitioned at the last element at the given level.
            </summary>
            <param name="level"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.PageIterator.TryGetBoundingBox(Tesseract.PageIteratorLevel,Tesseract.Rect@)">
            <summary>
            Gets the bounding rectangle of the current element at the given level. 
            </summary>
            <param name="level"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.PageIterator.TryGetBaseline(Tesseract.PageIteratorLevel,Tesseract.Rect@)">
            <summary>
            Gets the baseline of the current element at the given level.
            </summary>
            <remarks>
            The baseline is the line that passes through (x1, y1) and (x2, y2).
            WARNING: with vertical text, baselines may be vertical! Returns false if there is no baseline at the current position.</remarks>
            <param name="level"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.PageIterator.GetProperties">
            <summary>
            Gets the element orientation information that the iterator currently points too.
            </summary>
        </member>
        <member name="T:Tesseract.ElementProperties">
            <summary>
            Represents properties that describe a text block's orientation.
            </summary>
        </member>
        <member name="P:Tesseract.ElementProperties.Orientation">
            <summary>
            Gets the <see cref="P:Tesseract.ElementProperties.Orientation"/> for corresponding text block.
            </summary>
        </member>
        <member name="P:Tesseract.ElementProperties.TextLineOrder">
            <summary>
            Gets the <see cref="P:Tesseract.ElementProperties.TextLineOrder"/> for corresponding text block.
            </summary>
        </member>
        <member name="P:Tesseract.ElementProperties.WritingDirection">
            <summary>
            Gets the <see cref="P:Tesseract.ElementProperties.WritingDirection"/> for corresponding text block.
            </summary>
        </member>
        <member name="P:Tesseract.ElementProperties.DeskewAngle">
            <summary>
            Gets the angle the page would need to be rotated to deskew the text block.
            </summary>
        </member>
        <member name="T:Tesseract.PageSegMode">
            <summary>
            Represents the possible page layou analysis modes.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.OsdOnly">
            <summary>
            Orientation and script detection (OSD) only.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.AutoOsd">
            <summary>
            Automatic page sementation with orientantion and script detection (OSD).
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.AutoOnly">
            <summary>
            Automatic page segmentation, but no OSD, or OCR.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.Auto">
            <summary>
            Fully automatic page segmentation, but no OSD.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleColumn">
            <summary>
            Assume a single column of text of variable sizes.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleBlockVertText">
            <summary>
            Assume a single uniform block of vertically aligned text.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleBlock">
            <summary>
            Assume a single uniform block of text.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleLine">
            <summary>
            Treat the image as a single text line.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleWord">
            <summary>
            Treat the image as a single word.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.CircleWord">
            <summary>
            Treat the image as a single word in a circle.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.SingleChar">
            <summary>
            Treat the image as a single character.
            </summary>
        </member>
        <member name="F:Tesseract.PageSegMode.Count">
            <summary>
            Number of enum entries.
            </summary>
        </member>
        <member name="F:Tesseract.Pix.VerySmallAngle">
            <summary>
            A small angle, in radians, for threshold checking. Equal to about 0.06 degrees.
            </summary>
        </member>
        <member name="F:Tesseract.Pix.imageFomatLookup">
            <summary>
            Used to lookup image formats by extension.
            </summary>
        </member>
        <member name="M:Tesseract.Pix.#ctor(System.IntPtr)">
            <summary>
            Creates a new pix instance using an existing handle to a pix structure.
            </summary>
            <remarks>
            Note that the resulting instance takes ownership of the data structure.
            </remarks>
            <param name="handle"></param>
        </member>
        <member name="M:Tesseract.Pix.Save(System.String,System.Nullable{Tesseract.ImageFormat})">
            <summary>
            Saves the image to the specified file.
            </summary>
            <param name="filename">The path to the file.</param>
            <param name="format">The format to use when saving the image, if not specified the file extension is used to guess the format.</param>
        </member>
        <member name="M:Tesseract.Pix.Clone">
            <summary>
            Increments this pix's reference count and returns a reference to the same pix data.
            </summary>
            <remarks>
            A "clone" is simply a reference to an existing pix. It is implemented this way because
            image can be large and hence expensive to copy and extra handles need to be made with a simple
            policy to avoid double frees and memory leaks.
            
            The general usage protocol is:
            <list type="number">
            	<item>Whenever you want a new reference to an existing <see cref="T:Tesseract.Pix"/> call <see cref="M:Tesseract.Pix.Clone"/>.</item>
                <item>
            		Always call <see cref="M:Tesseract.Pix.Dispose(System.Boolean)"/> on all references. This decrements the reference count and
            		will destroy the pix when the reference count reaches zero.
            	</item>
            </list>
            </remarks>
            <returns>The pix with it's reference count incremented.</returns>
        </member>
        <member name="M:Tesseract.Pix.Deskew">
            <summary>
            Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise returns clone of original image.
            </summary>
            <remarks>
            This binarizes if necessary and finds the skew angle.  If the
            angle is large enough and there is sufficient confidence,
            it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix.</returns>
        </member>
        <member name="M:Tesseract.Pix.Deskew(Tesseract.Scew@)">
            <summary>
            Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise returns clone of original image.
            </summary>
            <remarks>
            This binarizes if necessary and finds the skew angle.  If the
            angle is large enough and there is sufficient confidence,
            it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix.</returns>
        </member>
        <member name="M:Tesseract.Pix.Deskew(System.Int32,Tesseract.Scew@)">
            <summary>
            Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise returns clone of original image.
            </summary>
            <remarks>
            This binarizes if necessary and finds the skew angle.  If the
            angle is large enough and there is sufficient confidence,
            it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <param name="redSearch">The reduction factor used by the binary search, can be 1, 2, or 4.</param>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix.</returns>
        </member>
        <member name="M:Tesseract.Pix.Deskew(Tesseract.ScewSweep,System.Int32,System.Int32,Tesseract.Scew@)">
            <summary>
            Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise returns clone of original image.
            </summary>
            <remarks>
            This binarizes if necessary and finds the skew angle.  If the
            angle is large enough and there is sufficient confidence,
            it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <param name="sweep">linear sweep parameters</param>
            <param name="redSearch">The reduction factor used by the binary search, can be 1, 2, or 4.</param>
            <param name="thresh">The threshold value used for binarizing the image.</param>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix.</returns>
        </member>
        <member name="M:Tesseract.Pix.BinarizeOtsuAdaptiveThreshold(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Binarization of the input image based on the passed parameters and the Otsu method
            </summary>
            <param name="sx"> sizeX Desired tile X dimension; actual size may vary.</param>
            <param name="sy"> sizeY Desired tile Y dimension; actual size may vary.</param>
            <param name="smoothx"> smoothX Half-width of convolution kernel applied to threshold array: use 0 for no smoothing.</param>
            <param name="smoothy"> smoothY Half-height of convolution kernel applied to threshold array: use 0 for no smoothing.</param>
            <param name="scorefract"> scoreFraction Fraction of the max Otsu score; typ. 0.1 (use 0.0 for standard Otsu).</param>
            <returns> ppixd is a pointer to the thresholded PIX image.</returns>
        </member>
        <member name="M:Tesseract.Pix.ConvertRGBToGray(System.Single,System.Single,System.Single)">
            <summary>
            Conversion from RBG to 8bpp grayscale.
            </summary>
            <param name="rwt">Red weight</param>
            <param name="gwt">Green weight</param>
            <param name="bwt">Blue weight</param>
            <returns></returns>
        </member>
        <member name="M:Tesseract.Pix.Rotate(System.Single,Tesseract.RotationMethod,Tesseract.RotationFill,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new image by rotating this image about it's centre.
            </summary>
            <remarks>
            Please note the following:
            <list type="bullet">
            <item>
            Rotation will bring in either white or black pixels, as specified by <paramref name="fillColor" /> from
            the outside as required.
            </item>
            <item>Above 20 degrees, sampling rotation will be used if shear was requested.</item>
            <item>Colormaps are removed for rotation by area map and shear.</item>
            <item>
            The resulting image can be expanded so that no image pixels are lost. To invoke expansion,
            input the original width and height. For repeated rotation, use of the original width and heigh allows
            expansion to stop at the maximum required size which is a square of side = sqrt(w*w + h*h).
            </item>
            </list>
            <para>
            Please note there is an implicit assumption about RGB component ordering.
            </para>
            </remarks>
            <param name="angle">The angle to rotate by, in radians; clockwise is positive.</param>
            <param name="method">The rotation method to use.</param>
            <param name="fillColor">The fill color to use for pixels that are brought in from the outside.</param>
            <param name="width">The original width; use 0 to avoid embedding</param>
            <param name="height">The original height; use 0 to avoid embedding</param>
            <returns>The image rotated around it's centre.</returns>
        </member>
        <member name="T:Tesseract.PixColormap">
            <summary>
            Represents a colormap.
            </summary>
            <remarks>
            Once the colormap is assigned to a pix it is owned by that pix and will be disposed off automatically 
            when the pix is disposed off.
            </remarks>
        </member>
        <member name="M:Tesseract.PixData.EndianByteSwap">
            <summary>
            Swaps the bytes on little-endian platforms within a word; bytes 0 and 3 swapped, and bytes `1 and 2 are swapped.
            </summary>
            <remarks>
            This is required for little-endians in situations where we convert from a serialized byte order that is in raster order, 
            as one typically has in file formats, to one with MSB-to-the-left in each 32-bit word, or v.v. See <seealso href="http://www.leptonica.com/byte-addressing.html"/>
            </remarks>
        </member>
        <member name="M:Tesseract.PixData.GetDataBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataDIBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataDIBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataQBit(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataQBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataTwoByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataTwoByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.GetDataFourByte(System.UInt32*,System.Int32)">
            <summary>
            Gets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="M:Tesseract.PixData.SetDataFourByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            Sets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="P:Tesseract.PixData.Data">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="P:Tesseract.PixData.WordsPerLine">
            <summary>
            Number of 32-bit words per line. 
            </summary>
        </member>
        <member name="T:Tesseract.TesseractException">
            <summary>
            Desctiption of TesseractException.
            </summary>
        </member>
        <member name="T:Tesseract.TextLineOrder">
            <summary>
            The text lines are read in the given sequence.
            </summary>
            <remarks>
            <para>
            For example in English the order is top-to-bottom. Chinese vertical text lines
            are read right-to-left. While Mongolian is written in vertical columns
            like Chinese but read left-to-right.
            </para>
            <para>
            Note that only some combinations makes sense for example <see cref="F:Tesseract.WritingDirection.LeftToRight"/> implies
            <see cref="F:Tesseract.TextLineOrder.TopToBottom"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Tesseract.TextLineOrder.LeftToRight">
            <summary>
            The text lines form vertical columns ordered left to right.
            </summary>
        </member>
        <member name="F:Tesseract.TextLineOrder.RightToLeft">
            <summary>
            The text lines form vertical columns ordered right to left.
            </summary>
        </member>
        <member name="F:Tesseract.TextLineOrder.TopToBottom">
            <summary>
            The text lines form horizontal columns ordered top to bottom.
            </summary>
        </member>
        <member name="T:Tesseract.WritingDirection">
            <summary>
            The grapheme cluster within a line of text are laid out logically in this direction,
            judged when looking at the text line rotated so that Orientation is "page up".
            </summary>
        </member>
        <member name="F:Tesseract.WritingDirection.LeftToRight">
            <summary>
            The text line from the left hand side to the right hand side when the page is rotated so it's orientation is <see cref="F:Tesseract.Orientation.PageUp"/>.
            </summary>
        </member>
        <member name="F:Tesseract.WritingDirection.RightToLeft">
            <summary>
            The text line from the right hand side to the left hand side when the page is rotated so it's orientation is <see cref="F:Tesseract.Orientation.PageUp"/>.
            </summary>
        </member>
        <member name="F:Tesseract.WritingDirection.TopToBottom">
            <summary>
            The text line from the top to the bottom of the page when the page is rotated so it's orientation is <see cref="F:Tesseract.Orientation.PageUp"/>.
            </summary>
        </member>
    </members>
</doc>
